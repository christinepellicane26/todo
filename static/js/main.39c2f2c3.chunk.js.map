{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ToDoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","currentToDo","target","value","addItem","preventDefault","console","log","todos","concat","toConsumableArray","state","addCurrentToDo","deleteToDo","index","filter","el","_this2","theList","map","react_default","a","createElement","key","type","onClick","onSubmit","htmlFor","name","onChange","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAgIiBA,cA1HjB,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAODI,aAAe,SAAAC,GACbR,EAAKS,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAThCZ,EAYXa,QAAU,SAAAL,GACRA,EAAMM,iBACNC,QAAQC,IAAI,wBACZhB,EAAKS,SAAS,CACZC,YAAa,GACbO,MAAK,GAAAC,OAAAjB,OAAAkB,EAAA,EAAAlB,CAAKD,EAAKoB,MAAMH,OAAhB,CAAsBjB,EAAKoB,MAAMV,iBAjB/BV,EA2BXqB,eAAiB,SAAAb,KA3BNR,EAgCXsB,WAAa,SAAAC,GACXR,QAAQC,IAAIO,GACZvB,EAAKS,SAAS,CACZQ,MAAOjB,EAAKoB,MAAMH,MAAMO,OAAO,SAAAC,GAC7B,OAAOA,IAAOF,OAlCpBvB,EAAKoB,MAAQ,CACXH,MAAO,GACPP,YAAa,IAJJV,wEA2CH,IAAA0B,EAAAvB,KACRY,QAAQC,IAAIb,KAAKiB,OAEjB,IAAMO,EAAUxB,KAAKiB,MAAMH,MAAMW,IAAI,SAACL,GAAD,OAAWM,EAAAC,EAAAC,cAAA,MAAIC,IAAKT,GAAQA,EACjEM,EAAAC,EAAAC,cAAA,UAAQE,KAAM,SAASC,QAAU,kBAAIR,EAAKJ,WAAWC,KAArD,kBAGA,OACEM,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,QAAMI,SAAUhC,KAAKU,SAClBgB,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,cAAf,mBACAP,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLI,KAAK,cACLzB,MAAOT,KAAKiB,MAAMV,YAClB4B,SAAUnC,KAAKI,eAEjBsB,EAAAC,EAAAC,cAAA,UAAQE,KAAM,SAASC,QAAU/B,KAAKkB,gBAAtC,kBAIJQ,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACbV,EAAAC,EAAAC,cAAA,OAAKQ,UAAY,aAEfV,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,UAAKJ,GAELE,EAAAC,EAAAC,cAAA,sBAvEcS,aCOHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.39c2f2c3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './index.css';\n\n\n\nclass ToDoList extends Component {\nconstructor(){\n   super();\n  this.state = {\n    todos: [],\n    currentToDo: \"\",\n   }\n  }\n\n  handleChange = event => {\n    this.setState({currentToDo: event.target.value});\n  }\n\n  addItem = event => {\n    event.preventDefault();\n    console.log(\"addItem Method Fired\");\n    this.setState({\n      currentToDo: \"\",\n      todos:[...this.state.todos,this.state.currentToDo]})\n\n      //prevent user from entering empty space\n      // if(this.state.currentToDo !==\"\") {this.setState/{ \n      //   todos:[...this.state.todos, this.state.currentToDo],};\n      //   deleteItem=()=>{}\n      //   console.log(event)\n\n  }\n  \n  addCurrentToDo = event => {\n    \n  }\n\n\n  deleteToDo = index => {\n    console.log(index); \n    this.setState({\n      todos: this.state.todos.filter(el =>{\n        return el !== index;\n      })\n    })\n\n     \n  }\n  \n  render(){\n  console.log(this.state)\n  \n  const theList = this.state.todos.map((index) => <li key={index}>{index}\n  <button type =\"delete\" onClick= {()=>this.deleteToDo(index)}> Task Done </button>\n  </li>);\n  \n  return (\n    <div>\n     <form onSubmit={this.addItem}>\n        <label htmlFor=\"Add To Box\">Add To-Do Item:</label>\n        <input\n          type=\"text\"\n          name=\"currentTodo\"\n          value={this.state.currentToDo}\n          onChange={this.handleChange}\n        />\n        <button type =\"submit\" onClick= {this.addCurrentToDo}> Add new task</button>\n                     \n      </form>\n\n    <div className=\"container\">\n      <div className = 'Show list'>\n        \n        <ul>\n         <h1>{theList}</h1>\n         \n         <li></li>\n                    \n        </ul>\n\n      </div>\n  </div>\n    </div>\n\n  );\n  \n}\n}\n\n\n  // render() \n  //   console.log(this.state)\n  //   const theList = this.state.todos.map((todos, index) => <li>{todos}\n  //   <button type =\"delete\" onClick= {()=>this.deleteCurrentToDo(index)}> Task Done </button>\n  //   </li>);\n    \n  //   return (\n  //     <div>\n  //       <form onSubmit={this.addItem}>\n  //         <label htmlFor=\"Add To Box\">Add To-Do Item:</label>\n  //         <input\n  //           type=\"text\"\n  //           name=\"currentTodo\"\n  //           value={this.state.currentToDo}\n  //           onChange={this.handleChange}\n  //         />\n  //         <button type =\"submit\" onClick= {this.addCurrentToDo}> Add new task</button>\n                       \n  //       </form>\n\n  //     <container>\n  //       <div class = 'Show list'>\n          \n  //         <ul>\n  //          <h1>{theList}</h1>\n           \n  //          <li></li>\n                      \n  //         </ul>\n\n  //       </div>\n  //   </container>\n  //     </div>\n\n  //   );\n\n\n\n  export default ToDoList","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}